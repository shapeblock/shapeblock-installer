apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: provision-vm
spec:
  description: Run Terraform script to create Cloud infrastructure for provisioning
    microk8s VMs.
  params:
  - default:
    - apply
    - -var-file=/workspace/source/terraform.tfvars
    - -auto-approve
    description: The terraform cli commands to tun
    name: ARGS
    type: array
  - default: docker.io/hashicorp/terraform:1.7.4
    description: the terraform image to use
    name: image
    type: string
  - description: Terraform workspace name
    name: workspace
    type: string
  - description: Cluster header
    name: clusterHeader
    type: string
  - description: SB url
    name: sbUrl
    type: string
  - description: Cluster ID
    name: clusterUuid
    type: string
  - description: Cluster cloud
    name: cloud
    type: string
  - description: Terraform creds
    name: terraform-secret
    type: string
    default: terraform-creds
  - description: Kind of operation to run
    name: op
    type: string
    default: create
  steps:
  - name: scaffold
    image: docker.io/alpine/git:v2.40.1
    script: |
      if [ "$(params.cloud)" == "aws" ] ; then
        git clone https://github.com/badri/microk8s-setup-aws . --branch k3s
      else
        git clone https://github.com/badri/microk8s-setup . --branch k3s
      fi
    workingDir: $(workspaces.source.path)

  - name: get-terraform-tfvars
    image: docker.io/curlimages/curl:8.1.2
    script: |
      curl -o terraform.tfvars -H "Accept: application/text" -H 'X-SB-Signature: $(params.clusterHeader)' $(params.sbUrl)/clusters/infra-tfvars/
    workingDir: $(workspaces.source.path)

  - name: tf-init
    image: $(params.image)
    script: |
      env
      terraform init
    workingDir: $(workspaces.source.path)
    envFrom:
      - secretRef:
          name: $(params.terraform-secret)
  - name: tf-new-workspace
    args:
    - workspace
    - new
    - $(params.workspace)
    command:
    - terraform
    image: $(params.image)
    onError: continue
    workingDir: $(workspaces.source.path)
    envFrom:
      - secretRef:
          name: $(params.terraform-secret)

  - name: tf-select-workspace
    args:
    - workspace
    - select
    - $(params.workspace)
    command:
    - terraform
    image: $(params.image)
    workingDir: $(workspaces.source.path)
    envFrom:
      - secretRef:
          name: $(params.terraform-secret)

  - name: tf-apply
    args:
    - $(params.ARGS)
    command:
    - terraform
    image: $(params.image)
    workingDir: $(workspaces.source.path)
    envFrom:
      - secretRef:
          name: $(params.terraform-secret)

  - name: tf-output
    image: $(params.image)
    script: |
      set -xv
      terraform output -raw private_key | tee private-key
      if [ "$(workspaces.results.bound)" == "true" ] ; then
        cp devices.json $(workspaces.results.path)/devices.json
        cp private-key $(workspaces.results.path)/private-key
        cp vms $(workspaces.results.path)/vms
        cp inventory $(workspaces.results.path)/inventory
      fi
    workingDir: $(workspaces.source.path)
    envFrom:
      - secretRef:
          name: $(params.terraform-secret)

  - name: send-vm-data
    image: docker.io/curlimages/curl:8.1.2
    script: |
      curl -H 'Content-Type: application/json' -H 'X-SB-Signature: $(params.clusterHeader)' --data-binary "@vms" $(params.sbUrl)/clusters/nodeinfo/
    workingDir: $(workspaces.source.path)

  - name: update-cluster-status
    image: docker.io/curlimages/curl:8.1.2
    script: |
      if [ "$(params.op)" == "scale" ] ; then
        curl -X POST -H 'Content-Type: application/json' -H 'X-SB-Signature: $(params.clusterHeader)' $(params.sbUrl)/clusters/status/
      fi
    workingDir: $(workspaces.source.path)

  workspaces:
  - name: source
  - name: results
    optional: true
